// Generated by gencpp from file frogs_msgs/robot_armGoal.msg
// DO NOT EDIT!


#ifndef FROGS_MSGS_MESSAGE_ROBOT_ARMGOAL_H
#define FROGS_MSGS_MESSAGE_ROBOT_ARMGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace frogs_msgs
{
template <class ContainerAllocator>
struct robot_armGoal_
{
  typedef robot_armGoal_<ContainerAllocator> Type;

  robot_armGoal_()
    : max_number(0)
    , wait_duration(0.0)  {
    }
  robot_armGoal_(const ContainerAllocator& _alloc)
    : max_number(0)
    , wait_duration(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _max_number_type;
  _max_number_type max_number;

   typedef double _wait_duration_type;
  _wait_duration_type wait_duration;





  typedef boost::shared_ptr< ::frogs_msgs::robot_armGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frogs_msgs::robot_armGoal_<ContainerAllocator> const> ConstPtr;

}; // struct robot_armGoal_

typedef ::frogs_msgs::robot_armGoal_<std::allocator<void> > robot_armGoal;

typedef boost::shared_ptr< ::frogs_msgs::robot_armGoal > robot_armGoalPtr;
typedef boost::shared_ptr< ::frogs_msgs::robot_armGoal const> robot_armGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frogs_msgs::robot_armGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace frogs_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'frogs_msgs': ['/home/ros/catkin_ws/devel/share/frogs_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frogs_msgs::robot_armGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frogs_msgs::robot_armGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frogs_msgs::robot_armGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca8c86ed62b42e478aaac2e19c943016";
  }

  static const char* value(const ::frogs_msgs::robot_armGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca8c86ed62b42e47ULL;
  static const uint64_t static_value2 = 0x8aaac2e19c943016ULL;
};

template<class ContainerAllocator>
struct DataType< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frogs_msgs/robot_armGoal";
  }

  static const char* value(const ::frogs_msgs::robot_armGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal         \n\
int64 max_number\n\
float64 wait_duration\n\
";
  }

  static const char* value(const ::frogs_msgs::robot_armGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.max_number);
      stream.next(m.wait_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_armGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frogs_msgs::robot_armGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frogs_msgs::robot_armGoal_<ContainerAllocator>& v)
  {
    s << indent << "max_number: ";
    Printer<int64_t>::stream(s, indent + "  ", v.max_number);
    s << indent << "wait_duration: ";
    Printer<double>::stream(s, indent + "  ", v.wait_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FROGS_MSGS_MESSAGE_ROBOT_ARMGOAL_H
